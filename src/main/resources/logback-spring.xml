<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="30 seconds">

    <contextName>logback</contextName>

    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>

    <!-- 彩色日志格式 -->
    <property name="COLOR_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %green(%5p) [%yellow(%15.15t)]  %cyan(%40.40c{40}) %yellow(#%-4.5L) : %m%n"/>

    <!-- 日志格式 -->
    <property name="LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %5p [%15.15t] %40.40c{40} #%-4.5L : %m%n"/>

    <springProperty scop="context" name="springAppName" source="spring.application.name"/>
    <springProperty scop="context" name="env" source="spring.profiles.active"/>
    <springProperty scop="context" name="loggingFilePath" source="logging.file.path"/>

    <property name="name" value="${springAppName}"/>
    <property name="logName" value="${name}.log"/>
    <property name="logPath" value="./logs/"/>

    <!-- 时间滚动输出 日志 -->
    <appender name="LOG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${logPath}/${logName}</file>
        <!--日志文件输出格式-->
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${logPath}/archive/${name}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--日志文件保留天数-->
            <maxHistory>30</maxHistory>
            <!--单个日志文件最大大小-->
            <maxFileSize>50MB</maxFileSize>
            <!--日志最大占用空间-->
            <totalSizeCap>2GB</totalSizeCap>
        </rollingPolicy>
        <!--        不记录ERROR级别的BUG-->
        <!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
        <!--            <level>ERROR</level>-->
        <!--            <onMatch>DENY</onMatch>-->
        <!--            <onMismatch>ACCEPT</onMismatch>-->
        <!--        </filter>-->
    </appender>

    <appender name="LOG_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${logPath}/${name}-error.log</file>
        <!--日志文件输出格式-->
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${logPath}/archive/${name}-error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--日志文件保留天数-->
            <maxHistory>30</maxHistory>
            <!--单个日志文件最大大小-->
            <maxFileSize>50MB</maxFileSize>
            <!--日志最大占用空间-->
            <totalSizeCap>2GB</totalSizeCap>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
    </appender>

    <!--输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${COLOR_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <logger name="com.ichaoge.iframe" level="DEBUG"/>

    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <if condition='property("env").equals("local")'>
            <else>
                <appender-ref ref="LOG_FILE"/>
                <appender-ref ref="LOG_ERROR"/>
            </else>
        </if>
    </root>

</configuration>